// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© tomohiroluo

//@version=4
strategy(title = "phex str",overlay=false, default_qty_type=strategy.percent_of_equity,default_qty_value= 100,max_lines_count = 365)

//set variables
single_direc = input(defval = 1, minval = 0, maxval =2, title = "0 for both, 1 for long only, 2 for short only", step = 1)
preference = input(defval=0,minval=0,maxval=1,title="Preference(0 for green,1 for red)")
volality_bar = input(defval = 14, title = "Volality")
ma_bar = input(defval = 2, title = "ma")
long_loss_perc = input(defval = 100, title = "Long Stop Loss %", minval = 0, maxval = 100, step = 0.1,type = input.float)*0.01
short_loss_perc = input(defval = 100, title = "Short Stop Loss %", minval = 0, maxval = 100, step = 0.1,type = input.float)*0.01

//set time range
startDate = input(title="Start Date", type=input.integer,
     defval=1, minval=1, maxval=31)
startMonth = input(title="Start Month", type=input.integer,
     defval=1, minval=1, maxval=12)
startYear = input(title="Start Year", type=input.integer,
     defval=2018, minval=1800, maxval=2100)

endDate = input(title="End Date", type=input.integer,
     defval=1, minval=1, maxval=31)
endMonth = input(title="End Month", type=input.integer,
     defval=7, minval=1, maxval=12)
endYear = input(title="End Year", type=input.integer,
     defval=2019, minval=1800, maxval=2100)
// Look if the close time of the current bar
// falls inside the date range
inDateRange = (time >= timestamp(syminfo.timezone, startYear,
         startMonth, startDate, 0, 0)) and
     (time < timestamp(syminfo.timezone, endYear, endMonth, endDate, 0, 0))



//set strategy direction
strategy.risk.allow_entry_in( single_direc == 1?strategy.direction.long:strategy.direction.all)
strategy.risk.allow_entry_in( single_direc == 2?strategy.direction.short:strategy.direction.all)

//phoe content
xopen = (open[1] + close[1])/2
xclose = close
xhigh = max(high,xopen)
xlow = min(low,xopen)
self_ma(x,y) =>
    sum = 0.0
    for i = 0 to y-1
        sum := sum + x[i]
    sum := sum/y
    sum
volality = self_ma(xhigh-xlow,volality_bar) 
top_ma = self_ma(xclose,ma_bar) + volality/2
bottom_ma = self_ma(xclose,ma_bar) - volality/2
bullish = cross(xclose,top_ma)
bearish = cross(bottom_ma,xclose)
var1 = barssince(bullish)
var2 = barssince(bearish)


//candlestick layout
the_color = color.white
if preference == 1
    if var1 < var2
        if xclose>xopen
            the_color := color.red
        else
            the_color := color.yellow
    else
        if xclose>xopen
            the_color := color.blue
        else
            the_color := color.green
else
    if var1 < var2
        if xclose>xopen
            the_color := color.green
        else
            the_color := color.blue
    else
        if xclose>xopen
            the_color := color.yellow
        else
            the_color := color.red
plotcandle(xopen,xhigh,xlow,xclose,color=the_color,title="candlestick")



//plot top and bottom
plot(top_ma,color=color.black,title="Top_ma")
plot(bottom_ma,color=color.red,title="Bottom_ma")

//result
a = if var1[1]>var2 and var1 == 0
    true
    
else if var2[1]>var1 and var2 == 0
    false
b = if var1[1]>var2 and var1 == 0
    false
    
else if var2[1]>var1 and var2 == 0
    true

//color of arrow
upper_arrow = color.green
lower_arrow = color.red
if preference == 0
    upper_arrow := color.red
    lower_arrow := color.green
 
//plot arrows and plot result   
plotshape(series =a,style=shape.triangleup,location=location.belowbar,color=lower_arrow,size=size.normal)
alertcondition(a, "Buy", "It's time to go long")
// plotshape(series=true,style=shape.triangledown,location=location.belowbar)
plotshape(series =b,style=shape.triangledown,location=location.abovebar,color=upper_arrow,size=size.normal)
alertcondition(b, "Sell", "It's time to go short")

if (a and inDateRange)
    strategy.entry("long",strategy.long)
if (b and inDateRange)
    strategy.entry("short",false)
//set close position price    
long_stop_price = strategy.position_avg_price*(1 - long_loss_perc)
short_stop_price = strategy.position_avg_price*(1 + short_loss_perc)

enterLong = strategy.position_size > 0
enterShort =strategy.position_size < 0

//close position
if (enterLong and inDateRange)
    strategy.exit(id = "XL STP", stop = long_stop_price)
if (enterShort and inDateRange)
    strategy.exit(id = "XS STP", stop = short_stop_price)
    
    
// Exit open market position when date range ends
if (not inDateRange)
    strategy.close_all()
